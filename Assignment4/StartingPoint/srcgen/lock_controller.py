"""Implementation of statechart lock_controller.
Generated by itemis CREATE code generator.
"""

import queue
import sys, os
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../lib')))
from yakindu.rx import Observable

class LockController:
	"""Implementation of the state machine LockController.
	"""

	class State:
		""" State Enum
		"""
		(
			main_region_emergency_mode,
			main_region_controller,
			main_region_controller_r1normal_mode,
			main_region_controller_r1normal_mode_door_low_open,
			main_region_controller_r1normal_mode_door_low_closed,
			main_region_controller_r1normal_mode_door_low_check_door,
			main_region_controller_r1normal_mode_door_low_close_flow,
			main_region_controller_r1normal_mode_door_high_open,
			main_region_controller_r1normal_mode_door_high_closed,
			main_region_controller_r1normal_mode_door_high_check_door,
			main_region_controller_r1normal_mode_door_high_close_flow,
			main_region_controller_r1normal_mode_light_low_green,
			main_region_controller_r1normal_mode_light_low_red,
			main_region_controller_r1normal_mode_light_high_green,
			main_region_controller_r1normal_mode_light_high_red,
			main_region_controller_r1normal_mode_update_level_update,
			null_state
		) = range(17)
	
	
	def __init__(self):
		""" Declares all necessary variables including list of states, histories etc. 
		"""
		
		self.LOW = 0
		self.HIGH = 1
		self.LOW_LVL = 500
		self.HIGH_LVL = 1500
		self.request_lvl_change = None
		self.water_lvl = None
		self.water_lvl_value = None
		self.resume = None
		self.door_obstructed = None
		self.set_request_pending = None
		self.set_request_pending_value = None
		self.set_request_pending_observable = Observable()
		self.set_sensor_broken = None
		self.set_sensor_broken_observable = Observable()
		self.open_flow = None
		self.open_flow_value = None
		self.open_flow_observable = Observable()
		self.close_flow = None
		self.close_flow_value = None
		self.close_flow_observable = Observable()
		self.open_doors = None
		self.open_doors_value = None
		self.open_doors_observable = Observable()
		self.close_doors = None
		self.close_doors_value = None
		self.close_doors_observable = Observable()
		self.green_light = None
		self.green_light_value = None
		self.green_light_observable = Observable()
		self.red_light = None
		self.red_light_value = None
		self.red_light_observable = Observable()
		
		self.__internal_event_queue = queue.Queue()
		self.in_event_queue = queue.Queue()
		self.__previous_lvl = None
		self.__open_door = None
		self.__pending = None
		self.open_door_high = None
		self.open_door_low = None
		self.close_door_low = None
		self.close_door_high = None
		
		# enumeration of all states:
		self.__State = LockController.State
		self.__state_conf_vector_changed = None
		self.__state_vector = [None] * 5
		for __state_index in range(5):
			self.__state_vector[__state_index] = self.State.null_state
		
		# for timed statechart:
		self.timer_service = None
		self.__time_events = [None] * 4
		
		# history vector:
		self.__history_vector = [None] * 6
		for __history_index in range(6):
			self.__history_vector[__history_index] = self.State.null_state
		
		# initializations:
		#Default init sequence for statechart LockController
		self.__previous_lvl = 0
		self.__open_door = self.LOW
		self.__pending = False
		self.__is_executing = False
		self.__state_conf_vector_position = None
	
	def is_active(self):
		"""Checks if the state machine is active.
		"""
		return self.__state_vector[0] is not self.__State.null_state or self.__state_vector[1] is not self.__State.null_state or self.__state_vector[2] is not self.__State.null_state or self.__state_vector[3] is not self.__State.null_state or self.__state_vector[4] is not self.__State.null_state
	
	def is_final(self):
		"""Checks if the statemachine is final.
		Always returns 'false' since this state machine can never become final.
		"""
		return False
			
	def is_state_active(self, state):
		"""Checks if the state is currently active.
		"""
		s = state
		if s == self.__State.main_region_emergency_mode:
			return self.__state_vector[0] == self.__State.main_region_emergency_mode
		if s == self.__State.main_region_controller:
			return (self.__state_vector[0] >= self.__State.main_region_controller)\
				and (self.__state_vector[0] <= self.__State.main_region_controller_r1normal_mode_update_level_update)
		if s == self.__State.main_region_controller_r1normal_mode:
			return (self.__state_vector[0] >= self.__State.main_region_controller_r1normal_mode)\
				and (self.__state_vector[0] <= self.__State.main_region_controller_r1normal_mode_update_level_update)
		if s == self.__State.main_region_controller_r1normal_mode_door_low_open:
			return self.__state_vector[0] == self.__State.main_region_controller_r1normal_mode_door_low_open
		if s == self.__State.main_region_controller_r1normal_mode_door_low_closed:
			return self.__state_vector[0] == self.__State.main_region_controller_r1normal_mode_door_low_closed
		if s == self.__State.main_region_controller_r1normal_mode_door_low_check_door:
			return self.__state_vector[0] == self.__State.main_region_controller_r1normal_mode_door_low_check_door
		if s == self.__State.main_region_controller_r1normal_mode_door_low_close_flow:
			return self.__state_vector[0] == self.__State.main_region_controller_r1normal_mode_door_low_close_flow
		if s == self.__State.main_region_controller_r1normal_mode_door_high_open:
			return self.__state_vector[1] == self.__State.main_region_controller_r1normal_mode_door_high_open
		if s == self.__State.main_region_controller_r1normal_mode_door_high_closed:
			return self.__state_vector[1] == self.__State.main_region_controller_r1normal_mode_door_high_closed
		if s == self.__State.main_region_controller_r1normal_mode_door_high_check_door:
			return self.__state_vector[1] == self.__State.main_region_controller_r1normal_mode_door_high_check_door
		if s == self.__State.main_region_controller_r1normal_mode_door_high_close_flow:
			return self.__state_vector[1] == self.__State.main_region_controller_r1normal_mode_door_high_close_flow
		if s == self.__State.main_region_controller_r1normal_mode_light_low_green:
			return self.__state_vector[2] == self.__State.main_region_controller_r1normal_mode_light_low_green
		if s == self.__State.main_region_controller_r1normal_mode_light_low_red:
			return self.__state_vector[2] == self.__State.main_region_controller_r1normal_mode_light_low_red
		if s == self.__State.main_region_controller_r1normal_mode_light_high_green:
			return self.__state_vector[3] == self.__State.main_region_controller_r1normal_mode_light_high_green
		if s == self.__State.main_region_controller_r1normal_mode_light_high_red:
			return self.__state_vector[3] == self.__State.main_region_controller_r1normal_mode_light_high_red
		if s == self.__State.main_region_controller_r1normal_mode_update_level_update:
			return self.__state_vector[4] == self.__State.main_region_controller_r1normal_mode_update_level_update
		return False
		
	def time_elapsed(self, event_id):
		"""Add time events to in event queue
		"""
		if event_id in range(4):
			self.in_event_queue.put(lambda: self.raise_time_event(event_id))
			self.run_cycle()
	
	def raise_time_event(self, event_id):
		"""Raise timed events using the event_id.
		"""
		self.__time_events[event_id] = True
	
	def __execute_queued_event(self, func):
		func()
	
	def __get_next_event(self):
		if not self.__internal_event_queue.empty():
			return self.__internal_event_queue.get()
		if not self.in_event_queue.empty():
			return self.in_event_queue.get()
		return None
	
	
	def raise_open_door_high(self):
		"""Raise method for event open_door_high.
		"""
		self.__internal_event_queue.put(self.__raise_open_door_high_call)
	
	def __raise_open_door_high_call(self):
		"""Raise callback for event open_door_high.
		"""
		self.open_door_high = True
	
	def raise_open_door_low(self):
		"""Raise method for event open_door_low.
		"""
		self.__internal_event_queue.put(self.__raise_open_door_low_call)
	
	def __raise_open_door_low_call(self):
		"""Raise callback for event open_door_low.
		"""
		self.open_door_low = True
	
	def raise_close_door_low(self):
		"""Raise method for event close_door_low.
		"""
		self.__internal_event_queue.put(self.__raise_close_door_low_call)
	
	def __raise_close_door_low_call(self):
		"""Raise callback for event close_door_low.
		"""
		self.close_door_low = True
	
	def raise_close_door_high(self):
		"""Raise method for event close_door_high.
		"""
		self.__internal_event_queue.put(self.__raise_close_door_high_call)
	
	def __raise_close_door_high_call(self):
		"""Raise callback for event close_door_high.
		"""
		self.close_door_high = True
	
	def raise_request_lvl_change(self):
		"""Raise method for event request_lvl_change.
		"""
		self.in_event_queue.put(self.__raise_request_lvl_change_call)
		self.run_cycle()
	
	def __raise_request_lvl_change_call(self):
		"""Raise callback for event request_lvl_change.
		"""
		self.request_lvl_change = True
	
	def raise_water_lvl(self, value):
		"""Raise method for event water_lvl.
		"""
		self.in_event_queue.put(lambda: self.__raise_water_lvl_call(value))
		self.run_cycle()
	
	def __raise_water_lvl_call(self, value):
		"""Raise callback for event water_lvl.
		"""
		self.water_lvl = True
		self.water_lvl_value = value
	
	def raise_resume(self):
		"""Raise method for event resume.
		"""
		self.in_event_queue.put(self.__raise_resume_call)
		self.run_cycle()
	
	def __raise_resume_call(self):
		"""Raise callback for event resume.
		"""
		self.resume = True
	
	def raise_door_obstructed(self):
		"""Raise method for event door_obstructed.
		"""
		self.in_event_queue.put(self.__raise_door_obstructed_call)
		self.run_cycle()
	
	def __raise_door_obstructed_call(self):
		"""Raise callback for event door_obstructed.
		"""
		self.door_obstructed = True
	
	def __entry_action_main_region_emergency_mode(self):
		"""Entry action for state 'Emergency mode'..
		"""
		#Entry action for state 'Emergency mode'.
		self.red_light_observable.next(self.LOW)
		self.red_light_observable.next(self.HIGH)
		self.close_doors_observable.next(self.LOW)
		self.close_doors_observable.next(self.HIGH)
		self.close_flow_observable.next(self.LOW)
		self.close_flow_observable.next(self.HIGH)
		self.set_sensor_broken_observable.next()
		
	def __entry_action_main_region_controller(self):
		"""Entry action for state 'Controller'..
		"""
		#Entry action for state 'Controller'.
		if not self.__pending:
			self.open_doors_observable.next(self.LOW)
			self.green_light_observable.next(self.LOW)
		
	def __entry_action_main_region_controller_r1_normal_mode_door_low_check_door(self):
		"""Entry action for state 'CheckDoor'..
		"""
		#Entry action for state 'CheckDoor'.
		self.timer_service.set_timer(self, 0, (2 * 1000), False)
		
	def __entry_action_main_region_controller_r1_normal_mode_door_low_close_flow(self):
		"""Entry action for state 'Close Flow'..
		"""
		#Entry action for state 'Close Flow'.
		self.timer_service.set_timer(self, 1, (1 * 1000), False)
		
	def __entry_action_main_region_controller_r1_normal_mode_door_high_check_door(self):
		"""Entry action for state 'CheckDoor'..
		"""
		#Entry action for state 'CheckDoor'.
		self.timer_service.set_timer(self, 2, (2 * 1000), False)
		
	def __entry_action_main_region_controller_r1_normal_mode_door_high_close_flow(self):
		"""Entry action for state 'Close Flow'..
		"""
		#Entry action for state 'Close Flow'.
		self.timer_service.set_timer(self, 3, (1 * 1000), False)
		
	def __exit_action_main_region_controller_r1_normal_mode_door_low_check_door(self):
		"""Exit action for state 'CheckDoor'..
		"""
		#Exit action for state 'CheckDoor'.
		self.timer_service.unset_timer(self, 0)
		
	def __exit_action_main_region_controller_r1_normal_mode_door_low_close_flow(self):
		"""Exit action for state 'Close Flow'..
		"""
		#Exit action for state 'Close Flow'.
		self.timer_service.unset_timer(self, 1)
		
	def __exit_action_main_region_controller_r1_normal_mode_door_high_check_door(self):
		"""Exit action for state 'CheckDoor'..
		"""
		#Exit action for state 'CheckDoor'.
		self.timer_service.unset_timer(self, 2)
		
	def __exit_action_main_region_controller_r1_normal_mode_door_high_close_flow(self):
		"""Exit action for state 'Close Flow'..
		"""
		#Exit action for state 'Close Flow'.
		self.timer_service.unset_timer(self, 3)
		
	def __enter_sequence_main_region_emergency_mode_default(self):
		"""'default' enter sequence for state Emergency mode.
		"""
		#'default' enter sequence for state Emergency mode
		self.__entry_action_main_region_emergency_mode()
		self.__state_vector[0] = self.State.main_region_emergency_mode
		self.__state_conf_vector_position = 0
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_main_region_controller_default(self):
		"""'default' enter sequence for state Controller.
		"""
		#'default' enter sequence for state Controller
		self.__entry_action_main_region_controller()
		self.__enter_sequence_main_region_controller_r1_default()
		
	def __enter_sequence_main_region_controller_r1_normal_mode_default(self):
		"""'default' enter sequence for state Normal Mode.
		"""
		#'default' enter sequence for state Normal Mode
		self.__enter_sequence_main_region_controller_r1_normal_mode_door_low_default()
		self.__enter_sequence_main_region_controller_r1_normal_mode_door_high_default()
		self.__enter_sequence_main_region_controller_r1_normal_mode_light_low_default()
		self.__enter_sequence_main_region_controller_r1_normal_mode_light_high_default()
		self.__enter_sequence_main_region_controller_r1_normal_mode_update_level_default()
		self.__history_vector[0] = self.__state_vector[0]
		
	def __enter_sequence_main_region_controller_r1_normal_mode_door_low_open_default(self):
		"""'default' enter sequence for state Open.
		"""
		#'default' enter sequence for state Open
		self.__state_vector[0] = self.State.main_region_controller_r1normal_mode_door_low_open
		self.__state_conf_vector_position = 0
		self.__state_conf_vector_changed = True
		self.__history_vector[1] = self.__state_vector[0]
		
	def __enter_sequence_main_region_controller_r1_normal_mode_door_low_closed_default(self):
		"""'default' enter sequence for state Closed.
		"""
		#'default' enter sequence for state Closed
		self.__state_vector[0] = self.State.main_region_controller_r1normal_mode_door_low_closed
		self.__state_conf_vector_position = 0
		self.__state_conf_vector_changed = True
		self.__history_vector[1] = self.__state_vector[0]
		
	def __enter_sequence_main_region_controller_r1_normal_mode_door_low_check_door_default(self):
		"""'default' enter sequence for state CheckDoor.
		"""
		#'default' enter sequence for state CheckDoor
		self.__entry_action_main_region_controller_r1_normal_mode_door_low_check_door()
		self.__state_vector[0] = self.State.main_region_controller_r1normal_mode_door_low_check_door
		self.__state_conf_vector_position = 0
		self.__state_conf_vector_changed = True
		self.__history_vector[1] = self.__state_vector[0]
		
	def __enter_sequence_main_region_controller_r1_normal_mode_door_low_close_flow_default(self):
		"""'default' enter sequence for state Close Flow.
		"""
		#'default' enter sequence for state Close Flow
		self.__entry_action_main_region_controller_r1_normal_mode_door_low_close_flow()
		self.__state_vector[0] = self.State.main_region_controller_r1normal_mode_door_low_close_flow
		self.__state_conf_vector_position = 0
		self.__state_conf_vector_changed = True
		self.__history_vector[1] = self.__state_vector[0]
		
	def __enter_sequence_main_region_controller_r1_normal_mode_door_high_open_default(self):
		"""'default' enter sequence for state Open.
		"""
		#'default' enter sequence for state Open
		self.__state_vector[1] = self.State.main_region_controller_r1normal_mode_door_high_open
		self.__state_conf_vector_position = 1
		self.__state_conf_vector_changed = True
		self.__history_vector[2] = self.__state_vector[1]
		
	def __enter_sequence_main_region_controller_r1_normal_mode_door_high_closed_default(self):
		"""'default' enter sequence for state Closed.
		"""
		#'default' enter sequence for state Closed
		self.__state_vector[1] = self.State.main_region_controller_r1normal_mode_door_high_closed
		self.__state_conf_vector_position = 1
		self.__state_conf_vector_changed = True
		self.__history_vector[2] = self.__state_vector[1]
		
	def __enter_sequence_main_region_controller_r1_normal_mode_door_high_check_door_default(self):
		"""'default' enter sequence for state CheckDoor.
		"""
		#'default' enter sequence for state CheckDoor
		self.__entry_action_main_region_controller_r1_normal_mode_door_high_check_door()
		self.__state_vector[1] = self.State.main_region_controller_r1normal_mode_door_high_check_door
		self.__state_conf_vector_position = 1
		self.__state_conf_vector_changed = True
		self.__history_vector[2] = self.__state_vector[1]
		
	def __enter_sequence_main_region_controller_r1_normal_mode_door_high_close_flow_default(self):
		"""'default' enter sequence for state Close Flow.
		"""
		#'default' enter sequence for state Close Flow
		self.__entry_action_main_region_controller_r1_normal_mode_door_high_close_flow()
		self.__state_vector[1] = self.State.main_region_controller_r1normal_mode_door_high_close_flow
		self.__state_conf_vector_position = 1
		self.__state_conf_vector_changed = True
		self.__history_vector[2] = self.__state_vector[1]
		
	def __enter_sequence_main_region_controller_r1_normal_mode_light_low_green_default(self):
		"""'default' enter sequence for state Green.
		"""
		#'default' enter sequence for state Green
		self.__state_vector[2] = self.State.main_region_controller_r1normal_mode_light_low_green
		self.__state_conf_vector_position = 2
		self.__state_conf_vector_changed = True
		self.__history_vector[3] = self.__state_vector[2]
		
	def __enter_sequence_main_region_controller_r1_normal_mode_light_low_red_default(self):
		"""'default' enter sequence for state Red.
		"""
		#'default' enter sequence for state Red
		self.__state_vector[2] = self.State.main_region_controller_r1normal_mode_light_low_red
		self.__state_conf_vector_position = 2
		self.__state_conf_vector_changed = True
		self.__history_vector[3] = self.__state_vector[2]
		
	def __enter_sequence_main_region_controller_r1_normal_mode_light_high_green_default(self):
		"""'default' enter sequence for state Green.
		"""
		#'default' enter sequence for state Green
		self.__state_vector[3] = self.State.main_region_controller_r1normal_mode_light_high_green
		self.__state_conf_vector_position = 3
		self.__state_conf_vector_changed = True
		self.__history_vector[4] = self.__state_vector[3]
		
	def __enter_sequence_main_region_controller_r1_normal_mode_light_high_red_default(self):
		"""'default' enter sequence for state Red.
		"""
		#'default' enter sequence for state Red
		self.__state_vector[3] = self.State.main_region_controller_r1normal_mode_light_high_red
		self.__state_conf_vector_position = 3
		self.__state_conf_vector_changed = True
		self.__history_vector[4] = self.__state_vector[3]
		
	def __enter_sequence_main_region_controller_r1_normal_mode_update_level_update_default(self):
		"""'default' enter sequence for state update.
		"""
		#'default' enter sequence for state update
		self.__state_vector[4] = self.State.main_region_controller_r1normal_mode_update_level_update
		self.__state_conf_vector_position = 4
		self.__state_conf_vector_changed = True
		self.__history_vector[5] = self.__state_vector[4]
		
	def __enter_sequence_main_region_default(self):
		"""'default' enter sequence for region main region.
		"""
		#'default' enter sequence for region main region
		self.__react_main_region__entry_default()
		
	def __enter_sequence_main_region_controller_r1_default(self):
		"""'default' enter sequence for region r1.
		"""
		#'default' enter sequence for region r1
		self.__react_main_region_controller_r1__entry_default()
		
	def __deep_enter_sequence_main_region_controller_r1(self):
		"""deep enterSequence with history in child r1.
		"""
		#deep enterSequence with history in child r1
		state = self.__history_vector[0]
		if state == self.State.main_region_controller_r1normal_mode_door_low_open:
			#enterSequence with history in child Normal Mode for leaf Open
			self.__deep_enter_sequence_main_region_controller_r1_normal_mode_door_low()
			self.__deep_enter_sequence_main_region_controller_r1_normal_mode_door_high()
			self.__deep_enter_sequence_main_region_controller_r1_normal_mode_light_low()
			self.__deep_enter_sequence_main_region_controller_r1_normal_mode_light_high()
			self.__deep_enter_sequence_main_region_controller_r1_normal_mode_update_level()
		elif state == self.State.main_region_controller_r1normal_mode_door_low_closed:
			#enterSequence with history in child Normal Mode for leaf Closed
			self.__deep_enter_sequence_main_region_controller_r1_normal_mode_door_low()
			self.__deep_enter_sequence_main_region_controller_r1_normal_mode_door_high()
			self.__deep_enter_sequence_main_region_controller_r1_normal_mode_light_low()
			self.__deep_enter_sequence_main_region_controller_r1_normal_mode_light_high()
			self.__deep_enter_sequence_main_region_controller_r1_normal_mode_update_level()
		elif state == self.State.main_region_controller_r1normal_mode_door_low_check_door:
			#enterSequence with history in child Normal Mode for leaf CheckDoor
			self.__deep_enter_sequence_main_region_controller_r1_normal_mode_door_low()
			self.__deep_enter_sequence_main_region_controller_r1_normal_mode_door_high()
			self.__deep_enter_sequence_main_region_controller_r1_normal_mode_light_low()
			self.__deep_enter_sequence_main_region_controller_r1_normal_mode_light_high()
			self.__deep_enter_sequence_main_region_controller_r1_normal_mode_update_level()
		elif state == self.State.main_region_controller_r1normal_mode_door_low_close_flow:
			#enterSequence with history in child Normal Mode for leaf Close Flow
			self.__deep_enter_sequence_main_region_controller_r1_normal_mode_door_low()
			self.__deep_enter_sequence_main_region_controller_r1_normal_mode_door_high()
			self.__deep_enter_sequence_main_region_controller_r1_normal_mode_light_low()
			self.__deep_enter_sequence_main_region_controller_r1_normal_mode_light_high()
			self.__deep_enter_sequence_main_region_controller_r1_normal_mode_update_level()
		
	def __enter_sequence_main_region_controller_r1_normal_mode_door_low_default(self):
		"""'default' enter sequence for region Door Low.
		"""
		#'default' enter sequence for region Door Low
		self.__react_main_region_controller_r1_normal_mode_door_low__entry_default()
		
	def __deep_enter_sequence_main_region_controller_r1_normal_mode_door_low(self):
		"""deep enterSequence with history in child Door Low.
		"""
		#deep enterSequence with history in child Door Low
		state = self.__history_vector[1]
		if state == self.State.main_region_controller_r1normal_mode_door_low_open:
			#enterSequence with history in child Open for leaf Open
			self.__enter_sequence_main_region_controller_r1_normal_mode_door_low_open_default()
		elif state == self.State.main_region_controller_r1normal_mode_door_low_closed:
			#enterSequence with history in child Closed for leaf Closed
			self.__enter_sequence_main_region_controller_r1_normal_mode_door_low_closed_default()
		elif state == self.State.main_region_controller_r1normal_mode_door_low_check_door:
			#enterSequence with history in child CheckDoor for leaf CheckDoor
			self.__enter_sequence_main_region_controller_r1_normal_mode_door_low_check_door_default()
		elif state == self.State.main_region_controller_r1normal_mode_door_low_close_flow:
			#enterSequence with history in child Close Flow for leaf Close Flow
			self.__enter_sequence_main_region_controller_r1_normal_mode_door_low_close_flow_default()
		
	def __enter_sequence_main_region_controller_r1_normal_mode_door_high_default(self):
		"""'default' enter sequence for region Door High.
		"""
		#'default' enter sequence for region Door High
		self.__react_main_region_controller_r1_normal_mode_door_high__entry_default()
		
	def __deep_enter_sequence_main_region_controller_r1_normal_mode_door_high(self):
		"""deep enterSequence with history in child Door High.
		"""
		#deep enterSequence with history in child Door High
		state = self.__history_vector[2]
		if state == self.State.main_region_controller_r1normal_mode_door_high_open:
			#enterSequence with history in child Open for leaf Open
			self.__enter_sequence_main_region_controller_r1_normal_mode_door_high_open_default()
		elif state == self.State.main_region_controller_r1normal_mode_door_high_closed:
			#enterSequence with history in child Closed for leaf Closed
			self.__enter_sequence_main_region_controller_r1_normal_mode_door_high_closed_default()
		elif state == self.State.main_region_controller_r1normal_mode_door_high_check_door:
			#enterSequence with history in child CheckDoor for leaf CheckDoor
			self.__enter_sequence_main_region_controller_r1_normal_mode_door_high_check_door_default()
		elif state == self.State.main_region_controller_r1normal_mode_door_high_close_flow:
			#enterSequence with history in child Close Flow for leaf Close Flow
			self.__enter_sequence_main_region_controller_r1_normal_mode_door_high_close_flow_default()
		
	def __enter_sequence_main_region_controller_r1_normal_mode_light_low_default(self):
		"""'default' enter sequence for region Light Low.
		"""
		#'default' enter sequence for region Light Low
		self.__react_main_region_controller_r1_normal_mode_light_low__entry_default()
		
	def __deep_enter_sequence_main_region_controller_r1_normal_mode_light_low(self):
		"""deep enterSequence with history in child Light Low.
		"""
		#deep enterSequence with history in child Light Low
		state = self.__history_vector[3]
		if state == self.State.main_region_controller_r1normal_mode_light_low_green:
			#enterSequence with history in child Green for leaf Green
			self.__enter_sequence_main_region_controller_r1_normal_mode_light_low_green_default()
		elif state == self.State.main_region_controller_r1normal_mode_light_low_red:
			#enterSequence with history in child Red for leaf Red
			self.__enter_sequence_main_region_controller_r1_normal_mode_light_low_red_default()
		
	def __enter_sequence_main_region_controller_r1_normal_mode_light_high_default(self):
		"""'default' enter sequence for region Light High.
		"""
		#'default' enter sequence for region Light High
		self.__react_main_region_controller_r1_normal_mode_light_high__entry_default()
		
	def __deep_enter_sequence_main_region_controller_r1_normal_mode_light_high(self):
		"""deep enterSequence with history in child Light High.
		"""
		#deep enterSequence with history in child Light High
		state = self.__history_vector[4]
		if state == self.State.main_region_controller_r1normal_mode_light_high_green:
			#enterSequence with history in child Green for leaf Green
			self.__enter_sequence_main_region_controller_r1_normal_mode_light_high_green_default()
		elif state == self.State.main_region_controller_r1normal_mode_light_high_red:
			#enterSequence with history in child Red for leaf Red
			self.__enter_sequence_main_region_controller_r1_normal_mode_light_high_red_default()
		
	def __enter_sequence_main_region_controller_r1_normal_mode_update_level_default(self):
		"""'default' enter sequence for region updateLevel.
		"""
		#'default' enter sequence for region updateLevel
		self.__react_main_region_controller_r1_normal_mode_update_level__entry_default()
		
	def __deep_enter_sequence_main_region_controller_r1_normal_mode_update_level(self):
		"""deep enterSequence with history in child updateLevel.
		"""
		#deep enterSequence with history in child updateLevel
		state = self.__history_vector[5]
		if state == self.State.main_region_controller_r1normal_mode_update_level_update:
			#enterSequence with history in child update for leaf update
			self.__enter_sequence_main_region_controller_r1_normal_mode_update_level_update_default()
		
	def __exit_sequence_main_region_emergency_mode(self):
		"""Default exit sequence for state Emergency mode.
		"""
		#Default exit sequence for state Emergency mode
		self.__state_vector[0] = self.State.null_state
		self.__state_conf_vector_position = 0
		
	def __exit_sequence_main_region_controller(self):
		"""Default exit sequence for state Controller.
		"""
		#Default exit sequence for state Controller
		self.__exit_sequence_main_region_controller_r1()
		self.__state_vector[0] = self.State.null_state
		self.__state_vector[1] = self.State.null_state
		self.__state_vector[2] = self.State.null_state
		self.__state_vector[3] = self.State.null_state
		self.__state_vector[4] = self.State.null_state
		self.__state_conf_vector_position = 4
		
	def __exit_sequence_main_region_controller_r1_normal_mode_door_low_open(self):
		"""Default exit sequence for state Open.
		"""
		#Default exit sequence for state Open
		self.__state_vector[0] = self.State.main_region_controller_r1normal_mode
		self.__state_conf_vector_position = 0
		
	def __exit_sequence_main_region_controller_r1_normal_mode_door_low_closed(self):
		"""Default exit sequence for state Closed.
		"""
		#Default exit sequence for state Closed
		self.__state_vector[0] = self.State.main_region_controller_r1normal_mode
		self.__state_conf_vector_position = 0
		
	def __exit_sequence_main_region_controller_r1_normal_mode_door_low_check_door(self):
		"""Default exit sequence for state CheckDoor.
		"""
		#Default exit sequence for state CheckDoor
		self.__state_vector[0] = self.State.main_region_controller_r1normal_mode
		self.__state_conf_vector_position = 0
		self.__exit_action_main_region_controller_r1_normal_mode_door_low_check_door()
		
	def __exit_sequence_main_region_controller_r1_normal_mode_door_low_close_flow(self):
		"""Default exit sequence for state Close Flow.
		"""
		#Default exit sequence for state Close Flow
		self.__state_vector[0] = self.State.main_region_controller_r1normal_mode
		self.__state_conf_vector_position = 0
		self.__exit_action_main_region_controller_r1_normal_mode_door_low_close_flow()
		
	def __exit_sequence_main_region_controller_r1_normal_mode_door_high_open(self):
		"""Default exit sequence for state Open.
		"""
		#Default exit sequence for state Open
		self.__state_vector[1] = self.State.main_region_controller_r1normal_mode
		self.__state_conf_vector_position = 1
		
	def __exit_sequence_main_region_controller_r1_normal_mode_door_high_closed(self):
		"""Default exit sequence for state Closed.
		"""
		#Default exit sequence for state Closed
		self.__state_vector[1] = self.State.main_region_controller_r1normal_mode
		self.__state_conf_vector_position = 1
		
	def __exit_sequence_main_region_controller_r1_normal_mode_door_high_check_door(self):
		"""Default exit sequence for state CheckDoor.
		"""
		#Default exit sequence for state CheckDoor
		self.__state_vector[1] = self.State.main_region_controller_r1normal_mode
		self.__state_conf_vector_position = 1
		self.__exit_action_main_region_controller_r1_normal_mode_door_high_check_door()
		
	def __exit_sequence_main_region_controller_r1_normal_mode_door_high_close_flow(self):
		"""Default exit sequence for state Close Flow.
		"""
		#Default exit sequence for state Close Flow
		self.__state_vector[1] = self.State.main_region_controller_r1normal_mode
		self.__state_conf_vector_position = 1
		self.__exit_action_main_region_controller_r1_normal_mode_door_high_close_flow()
		
	def __exit_sequence_main_region_controller_r1_normal_mode_light_low_green(self):
		"""Default exit sequence for state Green.
		"""
		#Default exit sequence for state Green
		self.__state_vector[2] = self.State.main_region_controller_r1normal_mode
		self.__state_conf_vector_position = 2
		
	def __exit_sequence_main_region_controller_r1_normal_mode_light_low_red(self):
		"""Default exit sequence for state Red.
		"""
		#Default exit sequence for state Red
		self.__state_vector[2] = self.State.main_region_controller_r1normal_mode
		self.__state_conf_vector_position = 2
		
	def __exit_sequence_main_region_controller_r1_normal_mode_light_high_green(self):
		"""Default exit sequence for state Green.
		"""
		#Default exit sequence for state Green
		self.__state_vector[3] = self.State.main_region_controller_r1normal_mode
		self.__state_conf_vector_position = 3
		
	def __exit_sequence_main_region_controller_r1_normal_mode_light_high_red(self):
		"""Default exit sequence for state Red.
		"""
		#Default exit sequence for state Red
		self.__state_vector[3] = self.State.main_region_controller_r1normal_mode
		self.__state_conf_vector_position = 3
		
	def __exit_sequence_main_region_controller_r1_normal_mode_update_level_update(self):
		"""Default exit sequence for state update.
		"""
		#Default exit sequence for state update
		self.__state_vector[4] = self.State.main_region_controller_r1normal_mode
		self.__state_conf_vector_position = 4
		
	def __exit_sequence_main_region(self):
		"""Default exit sequence for region main region.
		"""
		#Default exit sequence for region main region
		state = self.__state_vector[0]
		if state == self.State.main_region_emergency_mode:
			self.__exit_sequence_main_region_emergency_mode()
		elif state == self.State.main_region_controller_r1normal_mode_door_low_open:
			self.__exit_sequence_main_region_controller_r1_normal_mode_door_low_open()
		elif state == self.State.main_region_controller_r1normal_mode_door_low_closed:
			self.__exit_sequence_main_region_controller_r1_normal_mode_door_low_closed()
		elif state == self.State.main_region_controller_r1normal_mode_door_low_check_door:
			self.__exit_sequence_main_region_controller_r1_normal_mode_door_low_check_door()
		elif state == self.State.main_region_controller_r1normal_mode_door_low_close_flow:
			self.__exit_sequence_main_region_controller_r1_normal_mode_door_low_close_flow()
		state = self.__state_vector[1]
		if state == self.State.main_region_controller_r1normal_mode_door_high_open:
			self.__exit_sequence_main_region_controller_r1_normal_mode_door_high_open()
		elif state == self.State.main_region_controller_r1normal_mode_door_high_closed:
			self.__exit_sequence_main_region_controller_r1_normal_mode_door_high_closed()
		elif state == self.State.main_region_controller_r1normal_mode_door_high_check_door:
			self.__exit_sequence_main_region_controller_r1_normal_mode_door_high_check_door()
		elif state == self.State.main_region_controller_r1normal_mode_door_high_close_flow:
			self.__exit_sequence_main_region_controller_r1_normal_mode_door_high_close_flow()
		state = self.__state_vector[2]
		if state == self.State.main_region_controller_r1normal_mode_light_low_green:
			self.__exit_sequence_main_region_controller_r1_normal_mode_light_low_green()
		elif state == self.State.main_region_controller_r1normal_mode_light_low_red:
			self.__exit_sequence_main_region_controller_r1_normal_mode_light_low_red()
		state = self.__state_vector[3]
		if state == self.State.main_region_controller_r1normal_mode_light_high_green:
			self.__exit_sequence_main_region_controller_r1_normal_mode_light_high_green()
		elif state == self.State.main_region_controller_r1normal_mode_light_high_red:
			self.__exit_sequence_main_region_controller_r1_normal_mode_light_high_red()
		state = self.__state_vector[4]
		if state == self.State.main_region_controller_r1normal_mode_update_level_update:
			self.__exit_sequence_main_region_controller_r1_normal_mode_update_level_update()
		
	def __exit_sequence_main_region_controller_r1(self):
		"""Default exit sequence for region r1.
		"""
		#Default exit sequence for region r1
		state = self.__state_vector[0]
		if state == self.State.main_region_controller_r1normal_mode_door_low_open:
			self.__exit_sequence_main_region_controller_r1_normal_mode_door_low_open()
		elif state == self.State.main_region_controller_r1normal_mode_door_low_closed:
			self.__exit_sequence_main_region_controller_r1_normal_mode_door_low_closed()
		elif state == self.State.main_region_controller_r1normal_mode_door_low_check_door:
			self.__exit_sequence_main_region_controller_r1_normal_mode_door_low_check_door()
		elif state == self.State.main_region_controller_r1normal_mode_door_low_close_flow:
			self.__exit_sequence_main_region_controller_r1_normal_mode_door_low_close_flow()
		state = self.__state_vector[1]
		if state == self.State.main_region_controller_r1normal_mode_door_high_open:
			self.__exit_sequence_main_region_controller_r1_normal_mode_door_high_open()
		elif state == self.State.main_region_controller_r1normal_mode_door_high_closed:
			self.__exit_sequence_main_region_controller_r1_normal_mode_door_high_closed()
		elif state == self.State.main_region_controller_r1normal_mode_door_high_check_door:
			self.__exit_sequence_main_region_controller_r1_normal_mode_door_high_check_door()
		elif state == self.State.main_region_controller_r1normal_mode_door_high_close_flow:
			self.__exit_sequence_main_region_controller_r1_normal_mode_door_high_close_flow()
		state = self.__state_vector[2]
		if state == self.State.main_region_controller_r1normal_mode_light_low_green:
			self.__exit_sequence_main_region_controller_r1_normal_mode_light_low_green()
		elif state == self.State.main_region_controller_r1normal_mode_light_low_red:
			self.__exit_sequence_main_region_controller_r1_normal_mode_light_low_red()
		state = self.__state_vector[3]
		if state == self.State.main_region_controller_r1normal_mode_light_high_green:
			self.__exit_sequence_main_region_controller_r1_normal_mode_light_high_green()
		elif state == self.State.main_region_controller_r1normal_mode_light_high_red:
			self.__exit_sequence_main_region_controller_r1_normal_mode_light_high_red()
		state = self.__state_vector[4]
		if state == self.State.main_region_controller_r1normal_mode_update_level_update:
			self.__exit_sequence_main_region_controller_r1_normal_mode_update_level_update()
		
	def __react_main_region__choice_0(self):
		"""The reactions of state null..
		"""
		#The reactions of state null.
		if self.__pending and self.__open_door == self.HIGH:
			self.open_flow_observable.next(self.LOW)
			self.__entry_action_main_region_controller()
			self.__enter_sequence_main_region_controller_r1_normal_mode_door_low_closed_default()
			self.__enter_sequence_main_region_controller_r1_normal_mode_door_high_default()
			self.__enter_sequence_main_region_controller_r1_normal_mode_light_low_default()
			self.__enter_sequence_main_region_controller_r1_normal_mode_light_high_default()
			self.__enter_sequence_main_region_controller_r1_normal_mode_update_level_default()
			self.__history_vector[0] = self.__state_vector[0]
		elif self.__pending and self.__open_door == self.LOW:
			self.open_flow_observable.next(self.HIGH)
			self.__entry_action_main_region_controller()
			self.__enter_sequence_main_region_controller_r1_normal_mode_door_low_closed_default()
			self.__enter_sequence_main_region_controller_r1_normal_mode_door_high_default()
			self.__enter_sequence_main_region_controller_r1_normal_mode_light_low_default()
			self.__enter_sequence_main_region_controller_r1_normal_mode_light_high_default()
			self.__enter_sequence_main_region_controller_r1_normal_mode_update_level_default()
			self.__history_vector[0] = self.__state_vector[0]
		else:
			self.__entry_action_main_region_controller()
			self.__react_main_region_controller_r1_history()
		
	def __react_main_region__entry_default(self):
		"""Default react sequence for initial entry .
		"""
		#Default react sequence for initial entry 
		self.__enter_sequence_main_region_controller_default()
		
	def __react_main_region_controller_r1_normal_mode_door_low__entry_default(self):
		"""Default react sequence for initial entry .
		"""
		#Default react sequence for initial entry 
		self.__enter_sequence_main_region_controller_r1_normal_mode_door_low_open_default()
		
	def __react_main_region_controller_r1_normal_mode_door_high__entry_default(self):
		"""Default react sequence for initial entry .
		"""
		#Default react sequence for initial entry 
		self.__enter_sequence_main_region_controller_r1_normal_mode_door_high_closed_default()
		
	def __react_main_region_controller_r1_normal_mode_light_low__entry_default(self):
		"""Default react sequence for initial entry .
		"""
		#Default react sequence for initial entry 
		self.__enter_sequence_main_region_controller_r1_normal_mode_light_low_green_default()
		
	def __react_main_region_controller_r1_normal_mode_light_high__entry_default(self):
		"""Default react sequence for initial entry .
		"""
		#Default react sequence for initial entry 
		self.__enter_sequence_main_region_controller_r1_normal_mode_light_high_red_default()
		
	def __react_main_region_controller_r1_normal_mode_update_level__entry_default(self):
		"""Default react sequence for initial entry .
		"""
		#Default react sequence for initial entry 
		self.__enter_sequence_main_region_controller_r1_normal_mode_update_level_update_default()
		
	def __react_main_region_controller_r1__entry_default(self):
		"""Default react sequence for initial entry .
		"""
		#Default react sequence for initial entry 
		self.__enter_sequence_main_region_controller_r1_normal_mode_default()
		
	def __react_main_region_controller_r1_history(self):
		"""Default react sequence for deep history entry history.
		"""
		#Default react sequence for deep history entry history
		#Enter the region with deep history
		if self.__history_vector[0] is not self.State.null_state:
			self.__deep_enter_sequence_main_region_controller_r1()
		else:
			self.__enter_sequence_main_region_controller_r1_normal_mode_default()
		
	def __react(self, transitioned_before):
		"""Implementation of __react function.
		"""
		#State machine reactions.
		return transitioned_before
	
	
	def __main_region_emergency_mode_react(self, transitioned_before):
		"""Implementation of __main_region_emergency_mode_react function.
		"""
		#The reactions of state Emergency mode.
		transitioned_after = self.__react(transitioned_before)
		if transitioned_after < 0:
			if self.request_lvl_change:
				self.__exit_sequence_main_region_emergency_mode()
				self.set_request_pending_observable.next(True)
				self.__pending = True
				self.__enter_sequence_main_region_emergency_mode_default()
				transitioned_after = 0
			elif self.resume:
				self.__exit_sequence_main_region_emergency_mode()
				self.__react_main_region__choice_0()
				transitioned_after = 0
		return transitioned_after
	
	
	def __main_region_controller_react(self, transitioned_before):
		"""Implementation of __main_region_controller_react function.
		"""
		#The reactions of state Controller.
		transitioned_after = self.__react(transitioned_before)
		if transitioned_after < 0:
			if (self.water_lvl) and ((self.water_lvl_value - self.__previous_lvl) > 1000 or (self.__previous_lvl - self.water_lvl_value) > 1000):
				self.__exit_sequence_main_region_controller()
				self.__enter_sequence_main_region_emergency_mode_default()
				transitioned_after = 4
		return transitioned_after
	
	
	def __main_region_controller_r1_normal_mode_react(self, transitioned_before):
		"""Implementation of __main_region_controller_r1_normal_mode_react function.
		"""
		#The reactions of state Normal Mode.
		return self.__main_region_controller_react(transitioned_before)
	
	
	def __main_region_controller_r1_normal_mode_door_low_open_react(self, transitioned_before):
		"""Implementation of __main_region_controller_r1_normal_mode_door_low_open_react function.
		"""
		#The reactions of state Open.
		transitioned_after = self.__main_region_controller_r1_normal_mode_react(transitioned_before)
		if transitioned_after < 0:
			if self.close_door_low:
				self.__exit_sequence_main_region_controller_r1_normal_mode_door_low_open()
				self.__enter_sequence_main_region_controller_r1_normal_mode_door_low_check_door_default()
				transitioned_after = 0
		return transitioned_after
	
	
	def __main_region_controller_r1_normal_mode_door_low_closed_react(self, transitioned_before):
		"""Implementation of __main_region_controller_r1_normal_mode_door_low_closed_react function.
		"""
		#The reactions of state Closed.
		transitioned_after = self.__main_region_controller_r1_normal_mode_react(transitioned_before)
		if transitioned_after < 0:
			if (self.water_lvl) and ((self.water_lvl_value - self.LOW_LVL) > -(30) and (self.water_lvl_value - self.LOW_LVL) < 30):
				self.__exit_sequence_main_region_controller_r1_normal_mode_door_low_closed()
				self.__enter_sequence_main_region_controller_r1_normal_mode_door_low_close_flow_default()
				transitioned_after = 0
		return transitioned_after
	
	
	def __main_region_controller_r1_normal_mode_door_low_check_door_react(self, transitioned_before):
		"""Implementation of __main_region_controller_r1_normal_mode_door_low_check_door_react function.
		"""
		#The reactions of state CheckDoor.
		transitioned_after = self.__main_region_controller_r1_normal_mode_react(transitioned_before)
		if transitioned_after < 0:
			if self.__time_events[0]:
				self.__exit_sequence_main_region_controller_r1_normal_mode_door_low_check_door()
				self.close_doors_observable.next(self.LOW)
				self.open_flow_observable.next(self.HIGH)
				self.__time_events[0] = False
				self.__enter_sequence_main_region_controller_r1_normal_mode_door_low_closed_default()
				transitioned_after = 0
			elif self.door_obstructed:
				self.__exit_sequence_main_region_controller_r1_normal_mode_door_low_check_door()
				self.__enter_sequence_main_region_controller_r1_normal_mode_door_low_check_door_default()
				transitioned_after = 0
		return transitioned_after
	
	
	def __main_region_controller_r1_normal_mode_door_low_close_flow_react(self, transitioned_before):
		"""Implementation of __main_region_controller_r1_normal_mode_door_low_close_flow_react function.
		"""
		#The reactions of state Close Flow.
		transitioned_after = self.__main_region_controller_r1_normal_mode_react(transitioned_before)
		if transitioned_after < 0:
			if self.__time_events[1]:
				self.__exit_sequence_main_region_controller_r1_normal_mode_door_low_close_flow()
				self.close_flow_observable.next(self.LOW)
				self.set_request_pending_observable.next(False)
				self.raise_open_door_low()
				self.open_doors_observable.next(self.LOW)
				self.__pending = False
				self.__open_door = self.LOW
				self.__time_events[1] = False
				self.__enter_sequence_main_region_controller_r1_normal_mode_door_low_open_default()
				transitioned_after = 0
		return transitioned_after
	
	
	def __main_region_controller_r1_normal_mode_door_high_open_react(self, transitioned_before):
		"""Implementation of __main_region_controller_r1_normal_mode_door_high_open_react function.
		"""
		#The reactions of state Open.
		transitioned_after = transitioned_before
		if transitioned_after < 1:
			if self.close_door_high:
				self.__exit_sequence_main_region_controller_r1_normal_mode_door_high_open()
				self.__enter_sequence_main_region_controller_r1_normal_mode_door_high_check_door_default()
				transitioned_after = 1
		return transitioned_after
	
	
	def __main_region_controller_r1_normal_mode_door_high_closed_react(self, transitioned_before):
		"""Implementation of __main_region_controller_r1_normal_mode_door_high_closed_react function.
		"""
		#The reactions of state Closed.
		transitioned_after = transitioned_before
		if transitioned_after < 1:
			if (self.water_lvl) and ((self.water_lvl_value - self.HIGH_LVL) > -(30) and (self.water_lvl_value - self.HIGH_LVL) < 30):
				self.__exit_sequence_main_region_controller_r1_normal_mode_door_high_closed()
				self.__enter_sequence_main_region_controller_r1_normal_mode_door_high_close_flow_default()
				transitioned_after = 1
		return transitioned_after
	
	
	def __main_region_controller_r1_normal_mode_door_high_check_door_react(self, transitioned_before):
		"""Implementation of __main_region_controller_r1_normal_mode_door_high_check_door_react function.
		"""
		#The reactions of state CheckDoor.
		transitioned_after = transitioned_before
		if transitioned_after < 1:
			if self.__time_events[2]:
				self.__exit_sequence_main_region_controller_r1_normal_mode_door_high_check_door()
				self.close_doors_observable.next(self.HIGH)
				self.open_flow_observable.next(self.LOW)
				self.__time_events[2] = False
				self.__enter_sequence_main_region_controller_r1_normal_mode_door_high_closed_default()
				transitioned_after = 1
			elif self.door_obstructed:
				self.__exit_sequence_main_region_controller_r1_normal_mode_door_high_check_door()
				self.__enter_sequence_main_region_controller_r1_normal_mode_door_high_check_door_default()
				transitioned_after = 1
		return transitioned_after
	
	
	def __main_region_controller_r1_normal_mode_door_high_close_flow_react(self, transitioned_before):
		"""Implementation of __main_region_controller_r1_normal_mode_door_high_close_flow_react function.
		"""
		#The reactions of state Close Flow.
		transitioned_after = transitioned_before
		if transitioned_after < 1:
			if self.__time_events[3]:
				self.__exit_sequence_main_region_controller_r1_normal_mode_door_high_close_flow()
				self.close_flow_observable.next(self.HIGH)
				self.set_request_pending_observable.next(False)
				self.raise_open_door_high()
				self.open_doors_observable.next(self.HIGH)
				self.__pending = False
				self.__open_door = self.HIGH
				self.__time_events[3] = False
				self.__enter_sequence_main_region_controller_r1_normal_mode_door_high_open_default()
				transitioned_after = 1
		return transitioned_after
	
	
	def __main_region_controller_r1_normal_mode_light_low_green_react(self, transitioned_before):
		"""Implementation of __main_region_controller_r1_normal_mode_light_low_green_react function.
		"""
		#The reactions of state Green.
		transitioned_after = transitioned_before
		if transitioned_after < 2:
			if self.request_lvl_change:
				self.__exit_sequence_main_region_controller_r1_normal_mode_light_low_green()
				self.raise_close_door_low()
				self.red_light_observable.next(self.LOW)
				self.set_request_pending_observable.next(True)
				self.__pending = True
				self.__enter_sequence_main_region_controller_r1_normal_mode_light_low_red_default()
				transitioned_after = 2
			elif self.open_door_low:
				self.__exit_sequence_main_region_controller_r1_normal_mode_light_low_green()
				self.green_light_observable.next(self.LOW)
				self.__enter_sequence_main_region_controller_r1_normal_mode_light_low_green_default()
				transitioned_after = 2
		return transitioned_after
	
	
	def __main_region_controller_r1_normal_mode_light_low_red_react(self, transitioned_before):
		"""Implementation of __main_region_controller_r1_normal_mode_light_low_red_react function.
		"""
		#The reactions of state Red.
		transitioned_after = transitioned_before
		if transitioned_after < 2:
			if self.open_door_low:
				self.__exit_sequence_main_region_controller_r1_normal_mode_light_low_red()
				self.green_light_observable.next(self.LOW)
				self.__enter_sequence_main_region_controller_r1_normal_mode_light_low_green_default()
				transitioned_after = 2
		return transitioned_after
	
	
	def __main_region_controller_r1_normal_mode_light_high_green_react(self, transitioned_before):
		"""Implementation of __main_region_controller_r1_normal_mode_light_high_green_react function.
		"""
		#The reactions of state Green.
		transitioned_after = transitioned_before
		if transitioned_after < 3:
			if self.request_lvl_change:
				self.__exit_sequence_main_region_controller_r1_normal_mode_light_high_green()
				self.raise_close_door_high()
				self.red_light_observable.next(self.HIGH)
				self.set_request_pending_observable.next(True)
				self.__pending = True
				self.__enter_sequence_main_region_controller_r1_normal_mode_light_high_red_default()
				transitioned_after = 3
		return transitioned_after
	
	
	def __main_region_controller_r1_normal_mode_light_high_red_react(self, transitioned_before):
		"""Implementation of __main_region_controller_r1_normal_mode_light_high_red_react function.
		"""
		#The reactions of state Red.
		transitioned_after = transitioned_before
		if transitioned_after < 3:
			if self.open_door_high:
				self.__exit_sequence_main_region_controller_r1_normal_mode_light_high_red()
				self.green_light_observable.next(self.HIGH)
				self.__enter_sequence_main_region_controller_r1_normal_mode_light_high_green_default()
				transitioned_after = 3
		return transitioned_after
	
	
	def __main_region_controller_r1_normal_mode_update_level_update_react(self, transitioned_before):
		"""Implementation of __main_region_controller_r1_normal_mode_update_level_update_react function.
		"""
		#The reactions of state update.
		transitioned_after = transitioned_before
		if transitioned_after < 4:
			if self.water_lvl:
				self.__exit_sequence_main_region_controller_r1_normal_mode_update_level_update()
				self.__previous_lvl = self.water_lvl_value
				self.__enter_sequence_main_region_controller_r1_normal_mode_update_level_update_default()
				transitioned_after = 4
		return transitioned_after
	
	
	def __clear_in_events(self):
		"""Implementation of __clear_in_events function.
		"""
		self.request_lvl_change = False
		self.water_lvl = False
		self.resume = False
		self.door_obstructed = False
		self.__time_events[0] = False
		self.__time_events[1] = False
		self.__time_events[2] = False
		self.__time_events[3] = False
	
	
	def __clear_internal_events(self):
		"""Implementation of __clear_internal_events function.
		"""
		self.open_door_high = False
		self.open_door_low = False
		self.close_door_low = False
		self.close_door_high = False
	
	
	def __micro_step(self):
		"""Implementation of __micro_step function.
		"""
		transitioned = -1
		self.__state_conf_vector_position = 0
		state = self.__state_vector[0]
		if state == self.State.main_region_emergency_mode:
			transitioned = self.__main_region_emergency_mode_react(transitioned)
		elif state == self.State.main_region_controller_r1normal_mode_door_low_open:
			transitioned = self.__main_region_controller_r1_normal_mode_door_low_open_react(transitioned)
		elif state == self.State.main_region_controller_r1normal_mode_door_low_closed:
			transitioned = self.__main_region_controller_r1_normal_mode_door_low_closed_react(transitioned)
		elif state == self.State.main_region_controller_r1normal_mode_door_low_check_door:
			transitioned = self.__main_region_controller_r1_normal_mode_door_low_check_door_react(transitioned)
		elif state == self.State.main_region_controller_r1normal_mode_door_low_close_flow:
			transitioned = self.__main_region_controller_r1_normal_mode_door_low_close_flow_react(transitioned)
		if self.__state_conf_vector_position < 1:
			state = self.__state_vector[1]
			if state == self.State.main_region_controller_r1normal_mode_door_high_open:
				transitioned = self.__main_region_controller_r1_normal_mode_door_high_open_react(transitioned)
			elif state == self.State.main_region_controller_r1normal_mode_door_high_closed:
				transitioned = self.__main_region_controller_r1_normal_mode_door_high_closed_react(transitioned)
			elif state == self.State.main_region_controller_r1normal_mode_door_high_check_door:
				transitioned = self.__main_region_controller_r1_normal_mode_door_high_check_door_react(transitioned)
			elif state == self.State.main_region_controller_r1normal_mode_door_high_close_flow:
				transitioned = self.__main_region_controller_r1_normal_mode_door_high_close_flow_react(transitioned)
		if self.__state_conf_vector_position < 2:
			state = self.__state_vector[2]
			if state == self.State.main_region_controller_r1normal_mode_light_low_green:
				transitioned = self.__main_region_controller_r1_normal_mode_light_low_green_react(transitioned)
			elif state == self.State.main_region_controller_r1normal_mode_light_low_red:
				transitioned = self.__main_region_controller_r1_normal_mode_light_low_red_react(transitioned)
		if self.__state_conf_vector_position < 3:
			state = self.__state_vector[3]
			if state == self.State.main_region_controller_r1normal_mode_light_high_green:
				transitioned = self.__main_region_controller_r1_normal_mode_light_high_green_react(transitioned)
			elif state == self.State.main_region_controller_r1normal_mode_light_high_red:
				transitioned = self.__main_region_controller_r1_normal_mode_light_high_red_react(transitioned)
		if self.__state_conf_vector_position < 4:
			state = self.__state_vector[4]
			if state == self.State.main_region_controller_r1normal_mode_update_level_update:
				self.__main_region_controller_r1_normal_mode_update_level_update_react(transitioned)
	
	
	def run_cycle(self):
		"""Implementation of run_cycle function.
		"""
		#Performs a 'run to completion' step.
		if self.timer_service is None:
			raise ValueError('Timer service must be set.')
		
		if self.__is_executing:
			return
		self.__is_executing = True
		next_event = self.__get_next_event()
		if next_event is not None:
			self.__execute_queued_event(next_event)
		condition_0 = True
		while condition_0:
			self.__micro_step()
			self.__clear_in_events()
			self.__clear_internal_events()
			condition_0 = False
			next_event = self.__get_next_event()
			if next_event is not None:
				self.__execute_queued_event(next_event)
				condition_0 = True
		self.__is_executing = False
	
	
	def enter(self):
		"""Implementation of enter function.
		"""
		#Activates the state machine.
		if self.timer_service is None:
			raise ValueError('Timer service must be set.')
		
		if self.__is_executing:
			return
		self.__is_executing = True
		#Default enter sequence for statechart LockController
		self.__enter_sequence_main_region_default()
		self.__is_executing = False
	
	
	def exit(self):
		"""Implementation of exit function.
		"""
		#Deactivates the state machine.
		if self.__is_executing:
			return
		self.__is_executing = True
		#Default exit sequence for statechart LockController
		self.__exit_sequence_main_region()
		self.__state_vector[0] = self.State.null_state
		self.__state_conf_vector_position = 0
		self.__is_executing = False
	
	
	def trigger_without_event(self):
		"""Implementation of triggerWithoutEvent function.
		"""
		self.run_cycle()
	
